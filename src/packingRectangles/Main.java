package packingRectangles;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

public class Main {

	public static void main(String[] args) {
		System.out.println("Hello");
		
		ArrayList<Rectangle> list = new ArrayList<Rectangle>();
		
		Scanner scanner;
		try {
			scanner = new Scanner(new File("./src/packingRectangles/instance.txt"));
			read(scanner, list);
			Scanner reader = new Scanner(System.in);  // Reading from System.in
			boolean go = true;
			int option = 0;
			while (go) {
				System.out.println("Please select an option: ");
				System.out.println("1: Find a pretty good solution");
				System.out.println("2: Find an exact solution");
				option = reader.nextInt(); // Scans the next token of the input as an int.
				long time1, time2;
				switch (option) {
					case 1: System.out.println("Finding a pretty good solution....");
							time1 = System.currentTimeMillis();
							prettyGoodSolution();
							time2 = System.currentTimeMillis();
							System.out.println((time2 - time1) + "ms" );
							go = false;
							break;
					case 2: System.out.println("Finding a exact solution....");
							time1 = System.currentTimeMillis();
							exactSolution(list);
							time2 = System.currentTimeMillis();
							System.out.println((time2 - time1) + "ms" );
							go = false;
							break;
					default: System.out.println("Invalid option");
							break;
				}
			}
			reader.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			System.out.println("You're missing instance.txt");
		}
		System.out.println("done!");
	}

	public static void read(Scanner scanner, ArrayList<Rectangle> list) {
		while (scanner.hasNextLine()) {
			Scanner scanLine = new Scanner(scanner.nextLine());
			scanLine.useDelimiter(" ");
			if (scanLine.hasNext()) {
				int height = Integer.parseInt(scanLine.next());
				int width = Integer.parseInt(scanLine.next());
				list.add(new Rectangle(height, width));
			}
			scanLine.close();
		}
	}
	
	public static void listToString(ArrayList<Rectangle> list) {
		int i = 0;
		while (i != list.size()) {
			System.out.println(list.get(i).getHeight() + " " + list.get(i).getWidth());
			i++;
		}
	}

	/**
	 * Solves for the exact solution of the PackingProblem
	 * 
	 * The general idea for this is to start with the minimum area
	 * generated by the sum of the areas of the rectangles. When
	 * it is realized that a progression will not work, then abort
	 * and expand the smaller side (and shrink the larger side). 
	 * This continues until all possible dimensions are attempted.
	 * If an answer has yet to be found, then increase the area.
	 * 
	 * This process is going to be done over the following steps:
	 * 	1. Find the minimum side (minSide, height or width)
	 * 	2. Find the minimum area (minArea)
	 * 	3. Try a packing rectangle of minArea with minSide
	 * 	4. Try to pack rectangles
	 * 	5. If this fails, lengthen minSide and return to step 3
	 * 	6. If minSide becomes too large then increase minArea
	 * 		* ie: when minArea/minSide >= minOtherSide
	 * 	7. The first successful rectangle packing is the minimum
	 * */	
	public static void exactSolution(ArrayList<Rectangle> list) {
		
		// First: Find minSide
		int minHeight = findMinHeight(list);
		int minWidth = findMinWidth(list);
		int minSide;
		boolean usingHeight = false;
		if (minHeight <= minWidth) {
			minSide = minHeight;
			usingHeight = true;
		} else {
			minSide = minWidth;
		}
		
		// Second: Find minArea
		int minArea = findMinArea(list);
		
		// Third: Figure packing parameters
		int height, width;
		if (usingHeight) {
			
		} else {
			
		}
		
		// Fourth: Try a packing
		PackingRectangle pack = new PackingRectangle(height, width);
		Collections.sort(list, Rectangle.areaComparator);
		tryPacking(pack, list);
	}
	
	// finds the min height
	private static int findMinHeight(ArrayList<Rectangle> list) {
		//just initialize it to first height
		int minHeight = list.get(0).getHeight();
		for(int i = 1; i < list.size(); i++) {
			if(minHeight > list.get(i).getHeight()) {
				minHeight = list.get(i).getHeight();
			}
		}
		return minHeight;
	}
	
	// finds the min width
	private static int findMinWidth(ArrayList<Rectangle> list) {
		//just initialize it to first height
		int minWidth = list.get(0).getHeight();
		for(int i = 1; i < list.size(); i++) {
			if(minWidth > list.get(i).getHeight()) {
				minWidth = list.get(i).getHeight();
			}
		}
		return minWidth;
	}

	// finds the min area
	private static int findMinArea(ArrayList<Rectangle> list) {
		int maxSide = list.get(0).getHeight();
		for(int j = 0; j < list.size(); j++) {
			if(maxSide < list.get(j).getHeight()) {
				maxSide = list.get(j).getHeight();
			}
			if(maxSide < list.get(j).getWidth()) {
				maxSide = list.get(j).getWidth();
			}
		}
		
		int minArea = 0, i = 0;
		do {
			minArea += list.get(i).getArea();
			i++;
		} while (i < list.size());
		
		while(minArea % maxSide != 0) {
			minArea++;
		}
		return minArea;
	}
	
	/**
	 *  attempts to fit all rectangles into pack (height x width)
	 *  This works as follows:
	 *  	1. Create pack
	 *  	2. Sort rectangles by area
	 *  	3. Recursively try to fit rectangles into pack
	 */
	private static boolean tryPacking(PackingRectangle pack, ArrayList<Rectangle> list) {
		boolean packingWorks = false;
		return tryPacking(pack, list);
	}
	
//	private static boolean tryPacking(PackingRectangle pack, ArrayList<Rectangle> list) {
//		boolean packingWorks = false;
//		
//		return packingWorks;
//	}
	
	private static void prettyGoodSolution() {
		// TODO Auto-generated method stub
		
	}
	
}
