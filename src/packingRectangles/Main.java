package packingRectangles;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

public class Main {

	public static void main(String[] args) {
		System.out.println("Hello");
		
		ArrayList<Rectangle> list = new ArrayList<Rectangle>();
		
		Scanner scanner;
		try {
			scanner = new Scanner(new File("./src/packingRectangles/instance.txt"));
			read(scanner, list);
			Scanner reader = new Scanner(System.in);  // Reading from System.in
			int go = 0, option = 0;
			while (go == 0) {
				System.out.println("Please select an option: ");
				System.out.println("1: Find a pretty good solution");
				System.out.println("2: Find an exact solution");
				option = reader.nextInt(); // Scans the next token of the input as an int.
				long time1, time2;
				switch (option) {
					case 1: System.out.println("Finding a pretty good solution....");
							time1 = System.currentTimeMillis();
							prettyGoodSolution();
							time2 = System.currentTimeMillis();
							System.out.println((time2 - time1) + "ms" );
							go = 1;
							break;
					case 2: System.out.println("Finding a exact solution....");
							time1 = System.currentTimeMillis();
							exactSolution(list);
							time2 = System.currentTimeMillis();
							System.out.println((time2 - time1) + "ms" );
							go = 1;
							break;
					default: System.out.println("Invalid option");
							break;
				}
			}
			reader.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			System.out.println("You're missing instance.txt");
		}
		System.out.println("done!");
	}

	public static void read(Scanner scanner, ArrayList<Rectangle> list) {
		while (scanner.hasNextLine()) {
			Scanner scanLine = new Scanner(scanner.nextLine());
			scanLine.useDelimiter(" ");
			if (scanLine.hasNext()) {
				int height = Integer.parseInt(scanLine.next());
				int width = Integer.parseInt(scanLine.next());
				list.add(new Rectangle(height, width));
			}
			scanLine.close();
		}
	}
	
	public static void listToString(ArrayList<Rectangle> list) {
		while (!list.isEmpty()) {
			System.out.println(list.get(0).getHeight() + " " + list.get(0).getWidth());
			list.remove(0);
		}
	}

	public static int getArea(Rectangle rect) {
		return rect.getHeight() * rect.getWidth();
	}
	/**
	 * The general idea for this is to start with the minimum area
	 * generated by the sum of the areas of the rectangles. When
	 * it is realized that a progression will not work, then abort
	 * and expand the smaller side (and shrink the larger side). 
	 * This continues until all possible dimensions are attempted.
	 * If an answer has yet to be found, then increase the area.
	 * */	
	public static void exactSolution(ArrayList<Rectangle> list) {
		//these are for optimization
		int minArea = 0, minHeight = 0, minWidth = 0, maxHeight = 0, maxWidth = 0;
		
		//dimensions for the output
		int height = 0, width = 0;
		
		//get some basic info out of the list
		for(int i = 0; i < list.size(); i++) {
			minArea+=getArea(list.get(i));
			maxHeight+=list.get(i).getHeight();
			maxWidth+=list.get(i).getWidth();
			if(minHeight < list.get(i).getHeight()) {
				minHeight = list.get(i).getHeight();
			}
			if(minWidth < list.get(i).getWidth()) {
				minWidth = list.get(i).getWidth();
			}
		}
		
		//the larger dimension will be the "stronger" side
		if (minHeight >= minWidth) {
			height = minHeight;
			
			//we can't have fractions, also finds width
			while(minArea%height > 0 && height <= maxHeight) { 
				height++;
				//TODO: Move minArea up
				if (height*width == minArea) {
					width = minArea/height;
				}
			}
			exactSolution(list, height, width);
		}
		//...and this is symmetric with respect to width 
		else {
			width = minWidth;
		}
	}
	
	private static boolean exactSolution(ArrayList<Rectangle> list, int height, int width) {
		boolean[][] array = new boolean[height][width];
		boolean fits = false;
		//for each rectangle, see if it fits
		for (int i = 0; i < list.size(); i++) {
			for (int y = 0; y < height && !fits; y++) {
				for (int x = 0; x < width && !fits; x++) {
					
				}
			}
		}
		return false;
	}

	private static void prettyGoodSolution() {
		// TODO Auto-generated method stub
		
	}
}
