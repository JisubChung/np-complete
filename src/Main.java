import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

/**
 * FOR ALL CASES:
 *      Length: left to right
 *      Width : top to bottom
 */

public class Main {

    public static void main(String[] args) {
        System.out.println("Hello");

        ArrayList<Rectangle> list = new ArrayList<>();

        Scanner scanner;
        try {
            scanner = new Scanner(new File("./src/instance.txt"));
            read(scanner, list);
            Scanner reader = new Scanner(System.in);  // Reading from System.in


//            boolean go = true;
//            int option = 0;
//            while (go) {
//                System.out.println("Please select an option: ");
//                System.out.println("1: Find a pretty good solution");
//                System.out.println("2: Find an exact solution");
//                option = reader.nextInt(); // Scans the next token of the input as an int.
//                long time1, time2;
//                switch (option) {
//                    case 1:
//                        System.out.println("Finding a pretty good solution....");
//                        time1 = System.currentTimeMillis();
//                        prettyGoodSolution();
//                        time2 = System.currentTimeMillis();
//                        System.out.println((time2 - time1) + "ms");
//                        go = false;
//                        break;
//                    case 2:
//                        System.out.println("Finding a exact solution....");
//                        time1 = System.currentTimeMillis();
//                        exactSolution(list);
//                        time2 = System.currentTimeMillis();
//                        System.out.println((time2 - time1) + "ms");
//                        go = false;
//                        break;
//                    default:
//                        System.out.println("Invalid option");
//                        break;
//                }
//            }
            System.out.println(someonePackThis(new PackingRectangle(4,12),list));

            reader.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            System.out.println("You're missing instance.txt");
        }
        System.out.println("done!");
    }

    private static void read(Scanner scanner, ArrayList<Rectangle> list) {
        while (scanner.hasNextLine()) {
            Scanner scanLine = new Scanner(scanner.nextLine());
            scanLine.useDelimiter(" ");
            if (scanLine.hasNext()) {
                int length = Integer.parseInt(scanLine.next());
                int width = Integer.parseInt(scanLine.next());
                list.add(new Rectangle(length, width));
            }
            scanLine.close();
        }
    }

    /**
     * Solves for the exact solution of the PackingProblem
     * <p>
     * The general idea for this is to start with the minimum area
     * generated by the sum of the areas of the rectangles. When
     * it is realized that a progression will not work, then abort
     * and expand the smaller side (and shrink the larger side).
     * This continues until all possible dimensions are attempted.
     * If an answer has yet to be found, then increase the area.
     * <p>
     * This process is going to be done over the following steps:
     * 1. Find the minimum side (minSide, length or width)
     * 2. Find the minimum area (minArea)
     * 3. Try a packing rectangle of minArea with minSide
     * 4. Try to pack rectangles
     * 5. If this fails, lengthen minSide and return to step 3
     * 6. If minSide becomes too large then increase minArea
     * * ie: when minArea/minSide >= minOtherSide
     * 7. The first successful rectangle packing is the minimum
     */
    public static void exactSolution(ArrayList<Rectangle> list) {

        // First: Find minSide
        int minLength = findMinLength(list);
        int minWidth = findMinWidth(list);
        boolean usingLength = false;
        if (minLength <= minWidth) {
            usingLength = true;
        }

        // Second: Find minArea
        int minArea = findMinArea(list);

        // Third: Figure packing parameters
        int length, width;
        if (usingLength) {
            length = minLength;
            while (minArea % length != 0) {
                length++;
            }
            width = minArea / length;
        } else {
            width = minWidth;
            while (minArea % width != 0) {
                width++;
            }
            length = minArea / width;
        }

        // Fourth: Try a packing
        PackingRectangle pack = new PackingRectangle(length, width);
        Collections.sort(list, Rectangle.areaComparator);
        someonePackThis(pack, list);
    }

    // finds the min length
    private static int findMinLength(ArrayList<Rectangle> list) {
        //just initialize it to first length
        int minLength = list.get(0).getLength();
        for (int i = 1; i < list.size(); i++) {
            if (minLength > list.get(i).getLength()) {
                minLength = list.get(i).getLength();
            }
        }
        return minLength;
    }

    // finds the min width
    private static int findMinWidth(ArrayList<Rectangle> list) {
        //just initialize it to first length
        int minWidth = list.get(0).getLength();
        for (int i = 1; i < list.size(); i++) {
            if (minWidth > list.get(i).getLength()) {
                minWidth = list.get(i).getLength();
            }
        }
        return minWidth;
    }

    // finds the min area
    private static int findMinArea(ArrayList<Rectangle> list) {
        int maxSide = list.get(0).getLength();
        for (int j = 0; j < list.size(); j++) {
            if (maxSide < list.get(j).getLength()) {
                maxSide = list.get(j).getLength();
            }
            if (maxSide < list.get(j).getWidth()) {
                maxSide = list.get(j).getWidth();
            }
        }

        int minArea = 0, i = 0;
        do {
            minArea += list.get(i).getArea();
            i++;
        } while (i < list.size());

        while (minArea % maxSide != 0) {
            minArea++;
        }
        return minArea;
    }

    /**
     * attempts to fit all rectangles into pack (length x width)
     * This works as follows:
     * 1. Create pack
     * 2. Sort rectangles by area
     * 3. Recursively try to fit rectangles into pack
     *
     * This first method is the driver
     */
    private static boolean someonePackThis(PackingRectangle pack, ArrayList<Rectangle> list) {
        boolean doesFit = false;
        if (list.isEmpty()) {
            doesFit = true;
        } else {
            for (int i = 0; i < list.size() && !doesFit; i++) {
                doesFit = someonePackThis(pack, list, i);
            }
        }
        System.out.println("--------FINAL PACKING RESULT--------");
        pack.toStringPack();
        return doesFit;
    }

	private static boolean someonePackThis(PackingRectangle pack, ArrayList<Rectangle> list, int index) {
        boolean doesFit = false;

        // Terminate recursions upon reaching last element, note this doesn't always conclude recursion
        if (pack.howManyRectanglesPacked() == list.size()-1) {
            int i = 0;
            while (i < list.size() && list.get(i).isUsed()) {
                i++;
            }
            list.get(i).useThisRectangle();
            doesFit = pack.whereWillThisFit(list.get(i));
            if (!doesFit) {
                list.get(i).dontUseThisRectangle();
            } else {
                pack.flipRectangle(list.get(i).getAddedRow(), list.get(i).getAddedCol(), list.get(i));
            }
        } else {
            int i = index, k = 0;
            while(k < list.size() && !doesFit && !list.get(i).isUsed() && pack.howManyRectanglesPacked() < list.size() && pack.whereWillThisFit(list.get(i))) {

                System.out.println("Currently packing " + list.get(i).getLength() + "x" +list.get(i).getWidth());

                // identify the rectangle to be packed
                list.get(i).useThisRectangle();

                // pack the rectangle
                pack.flipRectangle(list.get(i).getAddedRow(), list.get(i).getAddedCol(), list.get(i));
                System.out.println("----------------");
                pack.toStringPack();
                System.out.println("----------------");
                System.out.println("Recursively packing " + list.get((i+1)%list.size()).getLength()+ "x" +list.get((i+1)%list.size()).getWidth());

                // recursively pack another rectangle
                doesFit = someonePackThis(pack, list, ((i+1)%list.size()));

                System.out.println("Failed packing " + list.get((i+1)%list.size()).getLength()+ "x" +list.get((i+1)%list.size()).getWidth());
                System.out.println("Remove packing " + list.get(i).getLength() + "x" +list.get(i).getWidth() );

                // if the recursion doesn't give a packed rectangle then remove this rectangle
                if (!doesFit) {
                    list.get(i).dontUseThisRectangle();
                    pack.flipRectangle(list.get(i).getAddedRow(), list.get(i).getAddedCol(), list.get(i));
                }
                System.out.println("----------------");
                pack.toStringPack();
                System.out.println("----------------");
                i++;
                k++;
                if (i >= list.size()) {
                    i = i%list.size();
                }
            }
        }
        return doesFit;
	}

    private static void prettyGoodSolution() {
        // TODO Auto-generated method stub

    }

}